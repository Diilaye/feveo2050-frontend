import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { 
  ArrowLeft, 
  User, 
  MapPin, 
  Phone, 
  Mail, 
  Calendar, 
  Clipboard, 
  CheckCircle, 
  XCircle, 
  Clock,
  FileText,
  Users,
  Building,
  Shield,
  DollarSign,
  Eye,
  Plus,
  Edit,
  UserPlus
} from 'lucide-react';
import { useAdminAuthContext } from '../contexts/AdminAuthContext';

// Interface pour les données GIE
interface GIE {
  _id: string;
  identifiantGIE: string;
  nomGIE: string;
  region: string;
  departement: string;
  commune: string;
  arrondissement?: string;
  codeRegion?: string;
  codeDepartement?: string;
  codeArrondissement?: string;
  codeCommune?: string;
  detailsGeographiques?: {
    nomRegion: string;
    nomDepartement: string;
    nomArrondissement: string;
    nomCommune: string;
  };
  numeroProtocole?: string;
  statutAdhesion: string;
  statutEnregistrement: string;
  dateCreation: string;
  dateConstitution?: string;
  daysInvestedSuccess?: number;
  investissementActif?: boolean;
  investissementDateDebut?: string;
  investissementDateFin?: string;
  investissementDureeJours?: number;
  // Informations de la présidente
  presidenteNom?: string;
  presidentePrenom?: string;
  presidenteCIN?: string;
  presidenteAdresse?: string;
  presidenteTelephone?: string;
  presidenteEmail?: string;
  // Pour la compatibilité avec l'ancien format
  presidente?: {
    _id?: string;
    telephone?: string;
    nom?: string;
    prenom?: string;
    adresse?: string;
    email?: string;
    cin?: string;
  };
  // Informations secteur et activités
  secteurPrincipal?: string;
  activites?: string[];
  objectifs?: string;
  documentsGeneres?: {
    statuts: boolean;
    reglementInterieur: boolean;
    procesVerbal: boolean;
    demandeAdhesion: boolean;
  };
  secretaire?: {
    telephone?: string;
    nom?: string;
    prenom?: string;
  };
  tresoriere?: {
    telephone?: string;
    nom?: string;
    prenom?: string;
  };
  membres?: Array<{
    _id: string;
    nom: string;
    prenom: string;
    telephone: string;
    fonction: string;
    cin?: string;
    adresse?: string;
    email?: string;
    genre?: string;
    age?: number;
  }>;
  documents?: Array<{
    _id: string;
    nom: string;
    type: string;
    url: string;
    dateUpload: string;
  }>;
  historique?: Array<{
    action: string;
    date: string;
    utilisateur: string;
    details?: string;
  }>;
}

const GIEDetails: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { admin } = useAdminAuthContext();
  
  const [gie, setGie] = useState<GIE | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<string>('informations');
  
  // États pour la modification des membres
  const [showEditMemberModal, setShowEditMemberModal] = useState<boolean>(false);
  const [editingMember, setEditingMember] = useState<any>(null);
  const [savingMember, setSavingMember] = useState<boolean>(false);
  
  useEffect(() => {
    const fetchGIEDetails = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const token = localStorage.getItem('adminAuthToken');
        if (!token) {
          navigate('/admin/login');
          return;
        }
        
        const response = await axios.get<{success: boolean, data: GIE, message?: string}>(`/admin/gies/${id}`, {
          baseURL: import.meta.env.VITE_API_URL || 'http://localhost:3051',
          headers: {
            Authorization: `Bearer ${token}`
          }
        });

        console.log(response.data);

        if (response.data && response.data.success) {
          setGie(response.data.data);
        } else {
          setError(response.data?.message || 'Erreur lors du chargement des données du GIE');
        }
      } catch (err) {
        console.error('Erreur lors du chargement des détails du GIE:', err);
        setError('Impossible de charger les informations du GIE. Veuillez réessayer.');
      } finally {
        setLoading(false);
      }
    };
    
    fetchGIEDetails();
  }, [id, navigate]);
  
  const activerAdhesion = async () => {
    if (!gie) return;
    
    try {
      const token = localStorage.getItem('adminAuthToken');
      
      const response = await axios.post<{ success: boolean, message: string }>(
        `/admin/gies/${gie._id}/activer-adhesion`, 
        {},
        {
          baseURL: import.meta.env.VITE_API_URL || 'http://localhost:3051',
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );
      
      if (response.data && response.data.success) {
        alert(response.data.message || 'Adhésion activée avec succès !');
        // Recharger les détails du GIE
        window.location.reload();
      }
    } catch (error) {
      console.error('Erreur lors de l\'activation de l\'adhésion:', error);
      alert('Erreur lors de l\'activation de l\'adhésion');
    }
  };
  
  // Fonction pour ouvrir le modal d'édition de membre
  const handleEditMember = (member: any) => {
    setEditingMember(member);
    setShowEditMemberModal(true);
  };
  
  // Fonction pour fermer le modal d'édition de membre
  const handleCloseEditModal = () => {
    setShowEditMemberModal(false);
    setEditingMember(null);
  };
  
  // Fonction pour mettre à jour ou ajouter un membre
  const handleUpdateMember = async (updatedMemberData: any) => {
    if (!gie || !editingMember) return;
    
    try {
      setSavingMember(true);
      const token = localStorage.getItem('adminAuthToken');
      
      // Déterminer si c'est un ajout ou une modification
      const isNewMember = editingMember.isNew;
      const isPresidente = updatedMemberData.fonction === 'Présidente';
      
      // URL et méthode en fonction de l'opération
      let url = `/admin/gies/${gie._id}/membres`;
      let method = 'post';
      
      if (!isNewMember) {
        url = `${url}/${editingMember._id}`;
        method = 'put';
      }
      
      const response = await axios.request<{ success: boolean, message: string, data: any }>({
        url,
        method,
        baseURL: import.meta.env.VITE_API_URL || 'http://localhost:3051',
        headers: {
          Authorization: `Bearer ${token}`
        },
        data: updatedMemberData
      });
      
      if (response.data && response.data.success) {
        // Mettre à jour les données locales
        let updatedMembers = [...(gie.membres || [])];
        
        if (isNewMember) {
          // Ajouter le nouveau membre
          updatedMembers.push(response.data.data);
        } else {
          // Mettre à jour le membre existant
          updatedMembers = updatedMembers.map(membre => 
            membre._id === editingMember._id ? response.data.data : membre
          );
        }
        
        // Si c'est la présidente qui a été modifiée ou ajoutée, mettre à jour les informations de la présidente
        if (isPresidente) {
          const updatedGie = { 
            ...gie, 
            membres: updatedMembers,
            presidenteNom: response.data.data.nom,
            presidentePrenom: response.data.data.prenom,
            presidenteTelephone: response.data.data.telephone,
            presidenteEmail: response.data.data.email,
            presidenteAdresse: response.data.data.adresse,
            presidenteCIN: response.data.data.cin
          };
          setGie(updatedGie);
        } else {
          setGie({ ...gie, membres: updatedMembers });
        }
        
        alert(isNewMember ? 'Membre ajouté avec succès !' : 'Membre mis à jour avec succès !');
        handleCloseEditModal();
      } else {
        alert(response.data?.message || `Erreur lors de ${isNewMember ? 'l\'ajout' : 'la mise à jour'} du membre`);
      }
    } catch (error) {
      console.error(`Erreur lors de ${editingMember.isNew ? 'l\'ajout' : 'la mise à jour'} du membre:`, error);
      alert(`Erreur lors de ${editingMember.isNew ? 'l\'ajout' : 'la mise à jour'} du membre`);
    } finally {
      setSavingMember(false);
    }
  };
  
  const renderStatusBadge = (status: string, type: 'adhesion' | 'enregistrement') => {
    let bgColor = 'bg-gray-100 text-gray-700';
    let text = 'Inconnu';
    
    if (type === 'adhesion') {
      if (status === 'validee') {
        bgColor = 'bg-green-100 text-green-800';
        text = 'Validée';
      } else if (status === 'en_attente') {
        bgColor = 'bg-yellow-100 text-yellow-800';
        text = 'En attente';
      } else {
        bgColor = 'bg-red-100 text-red-800';
        text = 'Non validée';
      }
    } else {
      if (status === 'valide') {
        bgColor = 'bg-green-100 text-green-800';
        text = 'Valide';
      } else if (status === 'en_attente_paiement') {
        bgColor = 'bg-yellow-100 text-yellow-800';
        text = 'En attente';
      } else if (status === 'rejete') {
        bgColor = 'bg-red-100 text-red-800';
        text = 'Rejeté';
      } else {
        bgColor = 'bg-purple-100 text-purple-800';
        text = 'En traitement';
      }
    }
    
    return (
      <span className={`inline-flex text-xs font-medium rounded-full px-3 py-1 ${bgColor}`}>
        {text}
      </span>
    );
  };
  
  const renderTabContent = () => {
    if (!gie) return null;
    
    switch (activeTab) {
      case 'informations':
        return (
          <div className="bg-white p-6 shadow-sm rounded-b-xl border-t-0 border border-gray-100">
            {/* Statut et informations clés */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
              <div className="bg-primary-50 p-5 rounded-xl border border-gray-200 shadow-sm flex flex-col justify-between">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-semibold text-gray-700">Statut d'adhésion</h3>
                  {renderStatusBadge(gie.statutAdhesion, 'adhesion')}
                </div>
                <p className="text-sm text-gray-500">
                  {gie.statutAdhesion === 'validee' 
                    ? 'Le GIE est pleinement opérationnel et peut réaliser des opérations financières.' 
                    : 'Le GIE est en attente de validation pour devenir pleinement opérationnel.'}
                </p>
              </div>
              
              <div className="bg-primary-50 p-5 rounded-xl border border-gray-200 shadow-sm flex flex-col justify-between">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-semibold text-gray-700">Statut d'enregistrement</h3>
                  {renderStatusBadge(gie.statutEnregistrement, 'enregistrement')}
                </div>
                <p className="text-sm text-gray-500">
                  {gie.statutEnregistrement === 'valide' 
                    ? 'Tous les documents d\'enregistrement du GIE ont été validés.' 
                    : 'Certains documents d\'enregistrement sont en attente de validation.'}
                </p>
              </div>

              <div className="bg-primary-50 p-5 rounded-xl border border-gray-200 shadow-sm flex flex-col justify-between">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-semibold text-gray-700">Investissement</h3>
                  <span className={`px-3 py-1 text-xs font-medium rounded-full ${
                    gie.investissementActif 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-yellow-100 text-yellow-800'
                  }`}>
                    {gie.investissementActif ? 'Actif' : 'Inactif'}
                  </span>
                </div>
                <div className="flex items-center">
                  <DollarSign className="w-5 h-5 text-green-600 mr-2" />
                  <span className="text-lg font-bold text-gray-800">{gie.daysInvestedSuccess || 0} jours</span>
                </div>
                <p className="text-sm text-gray-500 mt-2">
                  {gie.investissementActif
                    ? `Actif jusqu'au ${new Date(gie.investissementDateFin || '').toLocaleDateString('fr-FR')}`
                    : 'Aucun investissement actif en cours'}
                </p>
              </div>
              
              <div className="bg-primary-50 p-5 rounded-xl border border-gray-200 shadow-sm flex flex-col justify-between">
                <div className="flex items-center mb-3">
                  <Calendar className="w-5 h-5 text-primary-600 mr-2" />
                  <h3 className="text-sm font-semibold text-gray-700">Informations clés</h3>
                </div>
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-xs text-gray-500">Date de création:</span>
                    <span className="text-sm font-medium">{new Date(gie.dateCreation).toLocaleDateString('fr-FR')}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-xs text-gray-500">Identifiant:</span>
                    <span className="text-sm font-medium">{gie.identifiantGIE}</span>
                  </div>
                  {/* Informations de la présidente (nouveau format ou ancien format) */}
                  {(gie.presidenteNom) && (
                    <>
                      <div className="pt-2 mt-2 border-t border-gray-100">
                        <div className="flex items-center my-2">
                          <Shield className="w-4 h-4 mr-2 text-purple-600" />
                          <span className="text-sm font-medium text-purple-800">Présidente</span>
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-gray-500">Nom complet:</span>
                        <span className="text-sm font-medium">
                          {gie.presidentePrenom || ''} {gie.presidenteNom ||  ''}
                        </span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-gray-500">Téléphone:</span>
                        <span className="text-sm font-medium">
                          {gie.presidenteTelephone || 'Non renseigné'}
                        </span>
                      </div>
                      {(gie.presidenteAdresse) && (
                        <div className="flex justify-between items-center">
                          <span className="text-xs text-gray-500">Adresse:</span>
                          <span className="text-sm font-medium">
                            {gie.presidenteAdresse }
                          </span>
                        </div>
                      )}
                      {gie.presidenteEmail && (
                        <div className="flex justify-between items-center">
                          <span className="text-xs text-gray-500">Email:</span>
                          <span className="text-sm font-medium">
                            {gie.presidenteEmail}
                          </span>
                        </div>
                      )}
                      {gie.presidenteCIN && (
                        <div className="flex justify-between items-center">
                          <span className="text-xs text-gray-500">CIN:</span>
                          <span className="text-sm font-medium">
                            {gie.presidenteCIN}
                          </span>
                        </div>
                      )}
                    </>
                  )}
                </div>
              </div>
            </div>
            
            {/* Carte d'informations détaillées */}
                        {/* Carte d'informations détaillées */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Localisation */}
              <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
                <div className="px-5 py-4 bg-primary-50 border-b border-gray-200">
                  <h3 className="font-medium text-gray-900 flex items-center">
                    <MapPin className="w-5 h-5 text-primary-600 mr-2" />
                    Localisation
                  </h3>
                </div>
                <div className="p-5">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <p className="text-xs text-gray-500 mb-1">Région</p>
                      <p className="text-sm font-medium">{gie.detailsGeographiques?.nomRegion || gie.region} {gie.codeRegion && <span className="text-xs text-gray-500 ml-1">({gie.codeRegion})</span>}</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500 mb-1">Département</p>
                      <p className="text-sm font-medium">{gie.detailsGeographiques?.nomDepartement || gie.departement} {gie.codeDepartement && <span className="text-xs text-gray-500 ml-1">({gie.codeDepartement})</span>}</p>
                    </div>
                    {(gie.arrondissement || gie.detailsGeographiques?.nomArrondissement) && (
                      <div>
                        <p className="text-xs text-gray-500 mb-1">Arrondissement</p>
                        <p className="text-sm font-medium">{gie.detailsGeographiques?.nomArrondissement || gie.arrondissement} {gie.codeArrondissement && <span className="text-xs text-gray-500 ml-1">({gie.codeArrondissement})</span>}</p>
                      </div>
                    )}
                    <div>
                      <p className="text-xs text-gray-500 mb-1">Commune</p>
                      <p className="text-sm font-medium">{gie.detailsGeographiques?.nomCommune || gie.commune} {gie.codeCommune && <span className="text-xs text-gray-500 ml-1">({gie.codeCommune})</span>}</p>
                    </div>
                    {gie.numeroProtocole && (
                      <div>
                        <p className="text-xs text-gray-500 mb-1">Numéro de protocole</p>
                        <p className="text-sm font-medium">{gie.numeroProtocole}</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              {/* Secteur d'activité */}
              {(gie.secteurPrincipal || gie.activites) && (
                <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
                  <div className="px-5 py-4 bg-primary-50 border-b border-gray-200">
                    <h3 className="font-medium text-gray-900 flex items-center">
                      <Building className="w-5 h-5 text-primary-600 mr-2" />
                      Activités
                    </h3>
                  </div>
                  <div className="p-5">
                    {gie.secteurPrincipal && (
                      <div className="mb-4">
                        <p className="text-xs text-gray-500 mb-1">Secteur principal</p>
                        <p className="text-sm font-medium bg-primary-50 inline-block px-2 py-1 rounded-md">{gie.secteurPrincipal}</p>
                      </div>
                    )}
                    {gie.activites && gie.activites.length > 0 && (
                      <div className="mb-4">
                        <p className="text-xs text-gray-500 mb-2">Types d'activités</p>
                        <div className="flex flex-wrap gap-2">
                          {gie.activites.map((activite, index) => (
                            <span key={index} className="text-xs bg-green-50 text-green-800 px-2 py-1 rounded-md">{activite}</span>
                          ))}
                        </div>
                      </div>
                    )}
                    {gie.objectifs && (
                      <div>
                        <p className="text-xs text-gray-500 mb-1">Objectifs</p>
                        <p className="text-sm">{gie.objectifs}</p>
                      </div>
                    )}
                  </div>
                </div>
              )}
              
              {/* Direction du GIE */}
              {gie.presidente && (
                <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
                  <div className="bg-primary-50 px-5 py-3 border-b border-gray-200">
                    <div className="flex items-center">
                      <User className="w-5 h-5 text-primary-600 mr-2" />
                      <h3 className="font-semibold text-gray-800">Présidente</h3>
                    </div>
                  </div>
                  <div className="p-5">
                    <div className="flex items-center mb-4">
                      <div className="h-12 w-12 rounded-full bg-primary-100 text-primary-700 flex items-center justify-center font-semibold text-lg mr-4">
                        {(gie.presidente.prenom?.charAt(0) || '') + (gie.presidente.nom?.charAt(0) || '')}
                      </div>
                      <div>
                        <h4 className="font-medium text-gray-800">
                          {gie.presidente.prenom || ''} {gie.presidente.nom || ''}
                        </h4>
                        <p className="text-xs text-primary-600 font-medium">Présidente du GIE</p>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="flex items-center p-2 rounded-lg bg-gray-50">
                        <Phone className="w-4 h-4 text-gray-500 mr-2" />
                        <div>
                          <p className="text-xs text-gray-500">Téléphone</p>
                          <p className="text-sm font-medium">{gie.presidente.telephone || 'Non renseigné'}</p>
                        </div>
                      </div>
                      
                      {gie.presidente.adresse && (
                        <div className="flex items-center p-2 rounded-lg bg-gray-50">
                          <MapPin className="w-4 h-4 text-gray-500 mr-2" />
                          <div>
                            <p className="text-xs text-gray-500">Adresse</p>
                            <p className="text-sm font-medium">{gie.presidente.adresse}</p>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>
            
            {/* Actions du bas */}
            <div className="mt-8 flex justify-end">
              {(gie.statutAdhesion !== 'validee' || gie.statutEnregistrement !== 'valide') && (
                <button 
                  onClick={activerAdhesion}
                  className="flex items-center px-5 py-2.5 bg-primary-600 text-white rounded-xl hover:bg-primary-700 shadow-sm transition-all ml-3"
                >
                  <CheckCircle className="w-5 h-5 mr-2" />
                  Activer l'adhésion du GIE
                </button>
              )}
            </div>
          </div>
        );
        
      case 'membres':
        return (
          <div className="bg-white p-6 shadow-sm rounded-b-xl border-t-0 border border-gray-100">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                <Users className="w-5 h-5 mr-2 text-primary-600" />
                Membres du GIE
              </h3>
              <div className="flex items-center">
                <span className="bg-primary-50 text-primary-600 px-3 py-1 rounded-lg text-sm font-medium">
                  {gie.membres ? gie.membres.length : 0} membres
                </span>
              </div>
            </div>
            
            {/* Légende des rôles */}
            <div className="flex flex-wrap gap-3 mb-6 bg-primary-50 p-3 rounded-lg border border-primary-100">
              <div className="flex items-center">
                <div className="w-3 h-3 rounded-full bg-purple-500 mr-2"></div>
                <span className="text-xs font-medium text-gray-700">Présidente</span>
              </div>
              <div className="flex items-center">
                <div className="w-3 h-3 rounded-full bg-primary-600 mr-2"></div>
                <span className="text-xs font-medium text-gray-700">Secrétaire</span>
              </div>
              <div className="flex items-center">
                <div className="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                <span className="text-xs font-medium text-gray-700">Trésorière</span>
              </div>
              <div className="flex items-center">
                <div className="w-3 h-3 rounded-full bg-gray-500 mr-2"></div>
                <span className="text-xs font-medium text-gray-700">Membre</span>
              </div>
            </div>
            
            {/* Bouton pour ajouter un membre */}
            <div className="flex justify-end mb-4">
              <button 
                className="flex items-center text-sm bg-primary-600 hover:bg-primary-700 text-white py-2 px-4 rounded-lg"
                onClick={() => {
                  const newMember = {
                    _id: '', 
                    nom: '',
                    prenom: '',
                    telephone: '',
                    email: '',
                    adresse: '',
                    fonction: 'Membre',
                    cin: '',
                    isNew: true
                  };
                  handleEditMember(newMember);
                }}
              >
                <UserPlus className="w-4 h-4 mr-2" />
                Ajouter un membre
              </button>
            </div>
            
            {(!gie.membres || gie.membres.length === 0) && !(gie.presidente || gie.presidenteNom) ? (
              <div className="bg-gray-50 rounded-xl p-12 text-center border border-gray-200">
                <Users className="w-10 h-10 text-gray-400 mx-auto mb-3" />
                <p className="text-gray-500 mb-1">Aucun membre enregistré</p>
                <p className="text-sm text-gray-400">Le GIE n'a pas encore de membres dans sa base de données.</p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {/* Ajout de la présidente si elle existe mais n'est pas dans la liste des membres */}
                {(gie.presidente || gie.presidenteNom) && !gie.membres?.some(m => m.fonction === 'Présidente') && (
                  <div key="presidente" className="rounded-xl border border-purple-200 overflow-hidden shadow-sm md:col-span-2 md:row-span-2 order-first">
                    <div className="bg-purple-50 px-4 py-3 border-b border-purple-200 flex justify-between items-center">
                      <div className="flex items-center">
                        <Shield className="w-5 h-5 text-purple-600" />
                        <span className="ml-2 text-sm font-semibold text-purple-700">Présidente</span>
                      </div>
                      <span className="bg-purple-100 text-purple-800 text-xs px-2.5 py-0.5 rounded-full">Représentante légale</span>
                    </div>
                    <div className="p-4">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center">
                          <div className="h-10 w-10 rounded-full bg-purple-100 text-purple-800 flex items-center justify-center font-semibold text-sm mr-3">
                            {(gie.presidentePrenom?.charAt(0) || gie.presidente?.prenom?.charAt(0) || '') + (gie.presidenteNom?.charAt(0) || gie.presidente?.nom?.charAt(0) || '')}
                          </div>
                          <div>
                            <h4 className="font-medium text-gray-800">{gie.presidentePrenom || gie.presidente?.prenom || ''} {gie.presidenteNom || gie.presidente?.nom || ''}</h4>
                            <p className="text-xs text-purple-600">Représentante légale du GIE</p>
                          </div>
                        </div>
                        <button
                          onClick={() => handleEditMember({
                            _id: gie.presidente?._id || 'presidente',
                            nom: gie.presidenteNom || gie.presidente?.nom || '',
                            prenom: gie.presidentePrenom || gie.presidente?.prenom || '',
                            telephone: gie.presidenteTelephone || gie.presidente?.telephone || '',
                            email: gie.presidenteEmail || gie.presidente?.email || '',
                            adresse: gie.presidenteAdresse || gie.presidente?.adresse || '',
                            fonction: 'Présidente',
                            cin: gie.presidenteCIN || ''
                          })}
                          className="p-2 bg-purple-100 hover:bg-purple-200 rounded-full text-purple-700 transition"
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                      </div>
                      
                      <div className="flex items-center mt-2 text-gray-600 text-sm">
                        <Phone className="w-4 h-4 mr-2 text-gray-500" />
                        <span>{gie.presidenteTelephone || gie.presidente?.telephone || 'Non renseigné'}</span>
                      </div>
                      
                      {(gie.presidenteAdresse || gie.presidente?.adresse) && (
                        <div className="flex items-center mt-2 text-gray-600 text-sm">
                          <MapPin className="w-4 h-4 mr-2 text-gray-500" />
                          <span>{gie.presidenteAdresse || gie.presidente?.adresse}</span>
                        </div>
                      )}
                      
                      {(gie.presidenteEmail || gie.presidente?.email) && (
                        <div className="flex items-center mt-2 text-gray-600 text-sm">
                          <Mail className="w-4 h-4 mr-2 text-gray-500" />
                          <span>{gie.presidenteEmail || gie.presidente?.email}</span>
                        </div>
                      )}
                      
                      {gie.presidenteCIN && (
                        <div className="flex items-center mt-2 text-gray-600 text-sm">
                          <Shield className="w-4 h-4 mr-2 text-gray-500" />
                          <span>CIN: {gie.presidenteCIN}</span>
                        </div>
                      )}

                      <div className="mt-3 pt-3 border-t border-gray-100">
                        <div className="text-xs font-medium text-gray-500 mb-2">Responsabilités:</div>
                        <ul className="list-disc list-inside text-xs text-gray-600 space-y-1">
                          <li>Représentation légale</li>
                          <li>Coordination des activités</li>
                          <li>Gestion administrative</li>
                          <li>Prise de décisions importantes</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                )}
                
                {/* Affichage des membres existants */}
                {gie.membres && gie.membres.map((membre) => {
                  // Déterminer les couleurs et icônes basées sur le rôle
                  let bgColor = "bg-gray-100";
                  let textColor = "text-gray-700";
                  let borderColor = "border-gray-200";
                  let iconComponent = <Users className="w-5 h-5" />;
                  
                  if (membre.fonction === 'Présidente') {
                    bgColor = "bg-purple-50";
                    textColor = "text-purple-700";
                    borderColor = "border-purple-200";
                    iconComponent = <Shield className="w-5 h-5 text-purple-600" />;
                  } else if (membre.fonction === 'Secrétaire') {
                    bgColor = "bg-primary-50";
                    textColor = "text-primary-700";
                    borderColor = "border-primary-200";
                    iconComponent = <FileText className="w-5 h-5 text-primary-600" />;
                  } else if (membre.fonction === 'Trésorière') {
                    bgColor = "bg-green-50";
                    textColor = "text-green-700"; 
                    borderColor = "border-green-200";
                    iconComponent = <DollarSign className="w-5 h-5 text-green-600" />;
                  }

                  const roleName = membre.fonction === 'Présidente' 
                    ? 'Présidente' 
                    : membre.fonction === 'secretaire'
                    ? 'Secrétaire'
                    : membre.fonction === 'tresoriere'
                    ? 'Trésorière'
                    : 'Membre';
                    
                  return (
                    <div key={membre._id} className={`rounded-xl border ${borderColor} overflow-hidden shadow-sm ${membre.fonction === 'Présidente' ? 'md:col-span-2 md:row-span-2 order-first' : ''}`}>
                      <div className={`${bgColor} px-4 py-3 border-b ${borderColor} flex justify-between items-center`}>
                        <div className="flex items-center">
                          {iconComponent}
                          <span className={`ml-2 text-sm font-semibold ${textColor}`}>{membre.fonction}</span>
                        </div>
                        {membre.fonction === 'Présidente' && (
                          <span className="bg-purple-100 text-purple-800 text-xs px-2.5 py-0.5 rounded-full">Représentante légale</span>
                        )}
                      </div>
                      <div className="p-4">
                        <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center">
                          <div className={`h-10 w-10 rounded-full ${membre.fonction === 'Présidente' ? 'bg-purple-100 text-purple-800' : 'bg-primary-100 text-primary-700'} flex items-center justify-center font-semibold text-sm mr-3`}>
                            {membre.prenom.charAt(0)}{membre.nom.charAt(0)}
                          </div>
                          <div>
                            <h4 className="font-medium text-gray-800">{membre.prenom} {membre.nom}</h4>
                            {membre.fonction === 'Présidente' && (
                              <p className="text-xs text-purple-600">Représentante légale du GIE</p>
                            )}
                          </div>
                        </div>
                        <button
                          onClick={() => handleEditMember(membre)}
                          className={`p-2 ${membre.fonction === 'Présidente' ? 'bg-purple-100 hover:bg-purple-200 text-purple-700' : 'bg-primary-100 hover:bg-primary-200 text-primary-700'} rounded-full transition`}
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                      </div>
                        
                        <div className="flex items-center mt-2 text-gray-600 text-sm">
                          <Phone className="w-4 h-4 mr-2 text-gray-500" />
                          <span>{membre.telephone}</span>
                        </div>
                        
                        {membre.fonction === 'Présidente' && (gie.presidenteAdresse || gie.presidente?.adresse) && (
                          <div className="flex items-center mt-2 text-gray-600 text-sm">
                            <MapPin className="w-4 h-4 mr-2 text-gray-500" />
                            <span>{gie.presidenteAdresse || gie.presidente?.adresse}</span>
                          </div>
                        )}
                        
                        {membre.fonction === 'Présidente' && (membre.email || gie.presidenteEmail) && (
                          <div className="flex items-center mt-2 text-gray-600 text-sm">
                            <Mail className="w-4 h-4 mr-2 text-gray-500" />
                            <span>{membre.email || gie.presidenteEmail}</span>
                          </div>
                        )}
                        
                        {membre.fonction === 'Présidente' && gie.presidenteCIN && (
                          <div className="flex items-center mt-2 text-gray-600 text-sm">
                            <Shield className="w-4 h-4 mr-2 text-gray-500" />
                            <span>CIN: {gie.presidenteCIN}</span>
                          </div>
                        )}

                        {membre.fonction === 'Présidente' && (
                          <div className="mt-3 pt-3 border-t border-gray-100">
                            <div className="text-xs font-medium text-gray-500 mb-2">Responsabilités:</div>
                            <ul className="list-disc list-inside text-xs text-gray-600 space-y-1">
                              <li>Représentation légale</li>
                              <li>Coordination des activités</li>
                              <li>Gestion administrative</li>
                              <li>Prise de décisions importantes</li>
                            </ul>
                          </div>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        );
        
      case 'documents':
        return (
          <div className="bg-white p-6 shadow-sm rounded-b-xl border-t-0 border border-gray-100">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                <FileText className="w-5 h-5 mr-2 text-primary-600" />
                Documents du GIE
              </h3>
              <div className="flex items-center">
                <span className="bg-primary-50 text-primary-600 px-3 py-1 rounded-lg text-sm font-medium">
                  {gie.documents ? gie.documents.length : 0} documents
                </span>
              </div>
            </div>
            
            {/* Documents générés */}
            {gie.documentsGeneres && (
              <div className="mb-6">
                <h4 className="text-sm font-semibold mb-3 pb-2 border-b border-gray-100">Documents générés</h4>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                  <div className={`p-3 rounded-lg flex items-center ${gie.documentsGeneres.statuts ? 'bg-green-50 border border-green-100' : 'bg-gray-50 border border-gray-100'}`}>
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${gie.documentsGeneres.statuts ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-500'}`}>
                      <FileText className="w-4 h-4" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">Statuts</p>
                      <p className="text-xs text-gray-500">{gie.documentsGeneres.statuts ? 'Généré' : 'Non généré'}</p>
                    </div>
                  </div>
                  
                  <div className={`p-3 rounded-lg flex items-center ${gie.documentsGeneres.reglementInterieur ? 'bg-green-50 border border-green-100' : 'bg-gray-50 border border-gray-100'}`}>
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${gie.documentsGeneres.reglementInterieur ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-500'}`}>
                      <FileText className="w-4 h-4" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">Règlement intérieur</p>
                      <p className="text-xs text-gray-500">{gie.documentsGeneres.reglementInterieur ? 'Généré' : 'Non généré'}</p>
                    </div>
                  </div>
                  
                  <div className={`p-3 rounded-lg flex items-center ${gie.documentsGeneres.procesVerbal ? 'bg-green-50 border border-green-100' : 'bg-gray-50 border border-gray-100'}`}>
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${gie.documentsGeneres.procesVerbal ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-500'}`}>
                      <FileText className="w-4 h-4" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">Procès-verbal</p>
                      <p className="text-xs text-gray-500">{gie.documentsGeneres.procesVerbal ? 'Généré' : 'Non généré'}</p>
                    </div>
                  </div>
                  
                  <div className={`p-3 rounded-lg flex items-center ${gie.documentsGeneres.demandeAdhesion ? 'bg-green-50 border border-green-100' : 'bg-gray-50 border border-gray-100'}`}>
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${gie.documentsGeneres.demandeAdhesion ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-500'}`}>
                      <FileText className="w-4 h-4" />
                    </div>
                    <div>
                      <p className="text-sm font-medium">Demande d'adhésion</p>
                      <p className="text-xs text-gray-500">{gie.documentsGeneres.demandeAdhesion ? 'Généré' : 'Non généré'}</p>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            {/* Documents uploadés */}
            {!gie.documents || gie.documents.length === 0 ? (
              <div className="bg-gray-50 rounded-xl p-8 text-center border border-gray-200">
                <FileText className="w-10 h-10 text-gray-400 mx-auto mb-3" />
                <p className="text-gray-500 mb-1">Aucun document téléchargé</p>
                <p className="text-sm text-gray-400">Le GIE n'a pas encore téléchargé de documents supplémentaires.</p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {gie.documents.map((document) => {
                  // Déterminer l'icône en fonction du type de document
                  const getFileIcon = () => {
                    const type = document.type.toLowerCase();
                    if (type.includes('pdf')) return <FileText className="w-10 h-10 text-red-500" />;
                    if (type.includes('image') || type.includes('photo') || type.includes('jpeg') || type.includes('png')) 
                      return <FileText className="w-10 h-10 text-green-500" />;
                    if (type.includes('doc') || type.includes('word')) 
                      return <FileText className="w-10 h-10 text-primary-600" />;
                    return <FileText className="w-10 h-10 text-gray-500" />;
                  };
                  
                  return (
                    <div key={document._id} className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden hover:shadow-md transition-all">
                      <div className="p-5 flex flex-col items-center justify-center text-center border-b border-gray-100">
                        {getFileIcon()}
                        <h4 className="font-medium text-gray-800 mt-3 mb-1">{document.nom}</h4>
                        <span className="inline-flex text-xs font-medium rounded-full px-3 py-1 bg-primary-100 text-primary-700">
                          {document.type}
                        </span>
                      </div>
                      <div className="bg-gray-50 p-4 flex items-center justify-between">
                        <div className="text-xs text-gray-500">
                          Ajouté le {new Date(document.dateUpload).toLocaleDateString('fr-FR')}
                        </div>
                        <a 
                          href={document.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-primary-600 hover:text-primary-800 text-sm font-medium flex items-center"
                        >
                          <Eye className="w-4 h-4 mr-1" />
                          Visualiser
                        </a>
                      </div>
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        );
        
      case 'historique':
        return (
          <div className="bg-white p-6 shadow-sm rounded-b-xl border-t-0 border border-gray-100">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                <Clock className="w-5 h-5 mr-2 text-primary-600" />
                Historique du GIE
              </h3>
              <div className="flex items-center">
                <span className="bg-primary-50 text-primary-600 px-3 py-1 rounded-lg text-sm font-medium">
                  {gie.historique ? gie.historique.length : 0} événements
                </span>
              </div>
            </div>
            
            {!gie.historique || gie.historique.length === 0 ? (
              <div className="bg-gray-50 rounded-xl p-12 text-center border border-gray-200">
                <Clock className="w-10 h-10 text-gray-400 mx-auto mb-3" />
                <p className="text-gray-500 mb-1">Aucun événement enregistré</p>
                <p className="text-sm text-gray-400">L'historique des actions du GIE sera visible ici.</p>
              </div>
            ) : (
              <div className="relative py-6 pl-8 border-l-2 border-primary-200">
                {gie.historique.map((item, index) => {
                  // Déterminer l'icône et les couleurs en fonction du type d'action
                  const getEventStyle = () => {
                    const action = item.action.toLowerCase();
                    
                    if (action.includes('création') || action.includes('creat')) {
                      return {
                        bgColor: 'bg-green-50',
                        borderColor: 'border-green-200',
                        iconBgColor: 'bg-green-100',
                        iconColor: 'text-green-600',
                        icon: <Plus className="w-4 h-4" />
                      };
                    }
                    
                    if (action.includes('modif') || action.includes('update') || action.includes('edit')) {
                      return {
                        bgColor: 'bg-primary-50',
                        borderColor: 'border-primary-200',
                        iconBgColor: 'bg-primary-100',
                        iconColor: 'text-primary-600',
                        icon: <Edit className="w-4 h-4" />
                      };
                    }
                    
                    if (action.includes('activ') || action.includes('valid')) {
                      return {
                        bgColor: 'bg-purple-50',
                        borderColor: 'border-purple-200',
                        iconBgColor: 'bg-purple-100',
                        iconColor: 'text-purple-600',
                        icon: <CheckCircle className="w-4 h-4" />
                      };
                    }
                    
                    // Par défaut
                    return {
                      bgColor: 'bg-gray-50',
                      borderColor: 'border-gray-200',
                      iconBgColor: 'bg-gray-100',
                      iconColor: 'text-gray-600',
                      icon: <Clock className="w-4 h-4" />
                    };
                  };
                  
                  const style = getEventStyle();
                  
                  return (
                    <div key={index} className="relative mb-8 last:mb-0">
                      {/* Indicateur de timeline */}
                      <div className="absolute -left-[41px] w-8 h-8 rounded-full border-2 border-primary-500 bg-white flex items-center justify-center shadow-sm">
                        <div className={`w-6 h-6 rounded-full ${style.iconBgColor} ${style.iconColor} flex items-center justify-center`}>
                          {style.icon}
                        </div>
                      </div>
                      
                      {/* Contenu de l'événement */}
                      <div className={`${style.bgColor} rounded-lg p-5 shadow-sm border ${style.borderColor} ml-3`}>
                        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-3">
                          <h4 className="font-medium text-gray-800 mb-1 sm:mb-0">{item.action}</h4>
                          <div className="inline-flex items-center px-3 py-1 rounded-full text-xs bg-white bg-opacity-60 shadow-sm">
                            <Calendar className="w-3.5 h-3.5 mr-1.5 text-primary-600" />
                            <span>{new Date(item.date).toLocaleDateString('fr-FR')} à {new Date(item.date).toLocaleTimeString('fr-FR')}</span>
                          </div>
                        </div>
                        
                        <div className="flex items-center text-sm text-gray-600 mb-2">
                          <User className="w-4 h-4 mr-1.5 text-gray-500" />
                          <span>Effectué par {item.utilisateur}</span>
                        </div>
                        
                        {item.details && (
                          <div className="mt-2 p-3 bg-white bg-opacity-60 rounded-md text-sm text-gray-600">
                            {item.details}
                          </div>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        );
        
      default:
        return null;
    }
  };
  
  // Modal pour éditer un membre
  const renderMemberEditModal = () => {
    if (!showEditMemberModal || !editingMember) return null;
    
    const isPresidente = editingMember.fonction === 'Présidente';
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-xl shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
          <div className="px-6 py-4 border-b border-gray-100 flex justify-between items-center">
            <h3 className="text-lg font-semibold text-gray-800">
              {editingMember.isNew ? 'Ajouter un nouveau membre' : `Modifier ${isPresidente ? 'la présidente' : 'un membre'}`}
            </h3>
            <button 
              onClick={handleCloseEditModal}
              className="text-gray-400 hover:text-gray-500"
            >
              <XCircle className="w-6 h-6" />
            </button>
          </div>
          
          <div className="p-6">
            <form onSubmit={(e) => {
              e.preventDefault();
              
              // Récupérer les données du formulaire
              const formData = new FormData(e.currentTarget);
              const updatedMemberData = {
                nom: formData.get('nom') as string,
                prenom: formData.get('prenom') as string,
                telephone: formData.get('telephone') as string,
                email: formData.get('email') as string,
                adresse: formData.get('adresse') as string,
                fonction: formData.get('fonction') as string,
                cin: formData.get('cin') as string
              };
              
              handleUpdateMember(updatedMemberData);
            }}>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label htmlFor="prenom" className="block text-sm font-medium text-gray-700 mb-1">
                    Prénom
                  </label>
                  <input
                    type="text"
                    id="prenom"
                    name="prenom"
                    defaultValue={editingMember.prenom}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                    required
                  />
                </div>
                <div>
                  <label htmlFor="nom" className="block text-sm font-medium text-gray-700 mb-1">
                    Nom
                  </label>
                  <input
                    type="text"
                    id="nom"
                    name="nom"
                    defaultValue={editingMember.nom}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                    required
                  />
                </div>
              </div>
              
              <div className="mb-4">
                <label htmlFor="telephone" className="block text-sm font-medium text-gray-700 mb-1">
                  Numéro de téléphone
                </label>
                <input
                  type="tel"
                  id="telephone"
                  name="telephone"
                  defaultValue={editingMember.telephone}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                  required
                />
              </div>
              
              <div className="mb-4">
                <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  defaultValue={editingMember.email}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                />
              </div>
              
              <div className="mb-4">
                <label htmlFor="adresse" className="block text-sm font-medium text-gray-700 mb-1">
                  Adresse
                </label>
                <input
                  type="text"
                  id="adresse"
                  name="adresse"
                  defaultValue={editingMember.adresse}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                />
              </div>
              
              <div className="mb-4">
                <label htmlFor="cin" className="block text-sm font-medium text-gray-700 mb-1">
                  Numéro CIN
                </label>
                <input
                  type="text"
                  id="cin"
                  name="cin"
                  defaultValue={editingMember.cin}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                />
              </div>
              
              <div className="mb-4">
                <label htmlFor="fonction" className="block text-sm font-medium text-gray-700 mb-1">
                  Fonction
                </label>
                <select
                  id="fonction"
                  name="fonction"
                  defaultValue={editingMember.fonction}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                  required
                >
                  <option value="Présidente">Présidente</option>
                  <option value="Secrétaire">Secrétaire</option>
                  <option value="Trésorière">Trésorière</option>
                  <option value="Membre">Membre simple</option>
                </select>
              </div>
              
              <div className="flex justify-end space-x-3 mt-6 pt-4 border-t border-gray-100">
                <button
                  type="button"
                  onClick={handleCloseEditModal}
                  className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                >
                  Annuler
                </button>
                <button
                  type="submit"
                  disabled={savingMember}
                  className={`px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 ${savingMember ? 'opacity-70 cursor-not-allowed' : ''}`}
                >
                  {savingMember ? 'Enregistrement...' : (editingMember.isNew ? 'Ajouter' : 'Enregistrer')}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    );
  };
  
  if (loading) {
    return (
      <div className="p-8 flex flex-col items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600 mb-4"></div>
        <p className="text-gray-600">Chargement des détails du GIE...</p>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="p-8 flex flex-col items-center justify-center">
        <div className="bg-red-50 border border-red-200 text-red-700 px-6 py-4 rounded-xl mb-4">
          <p>{error}</p>
        </div>
        <button 
          onClick={() => navigate('/admin/dashboard')}
          className="flex items-center px-4 py-2.5 text-sm border border-gray-200 rounded-xl hover:bg-gray-50 transition-all"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Retour au tableau de bord
        </button>
      </div>
    );
  }
  
  if (!gie) {
    return (
      <div className="p-8 flex flex-col items-center justify-center">
        <div className="bg-amber-50 border border-amber-200 text-amber-700 px-6 py-4 rounded-xl mb-4">
          <p>Aucune information trouvée pour ce GIE.</p>
        </div>
        <button 
          onClick={() => navigate('/admin/dashboard')}
          className="flex items-center px-4 py-2.5 text-sm border border-gray-200 rounded-xl hover:bg-gray-50 transition-all"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Retour au tableau de bord
        </button>
      </div>
    );
  }
  
  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 py-8">
      {/* En-tête avec informations du GIE */}
      <div className="bg-white rounded-xl border border-gray-200 shadow-md hover:shadow-lg transition-all overflow-hidden mb-8">
        <div className="relative">
          {/* Bannière décorative */}
          <div className="absolute inset-x-0 top-0 h-16 bg-gradient-to-r from-primary-500 to-primary-600"></div>
          
          <div className="relative p-6 pt-20">
            <div className="flex items-center justify-between mb-6">
              <button 
                onClick={() => navigate('/admin/dashboard')}
                className="flex items-center bg-white text-gray-700 hover:text-primary-600 px-4 py-2 rounded-xl shadow-sm border border-gray-200 transition-all"
              >
                <ArrowLeft className="w-4 h-4 mr-2" />
                <span className="font-medium">Retour au tableau de bord</span>
              </button>
              
              <div className="flex items-center space-x-3">
                {gie.statutAdhesion === 'validee' && gie.statutEnregistrement === 'valide' ? (
                  <span className="inline-flex items-center px-4 py-2 rounded-xl text-sm font-medium bg-green-100 text-green-600 shadow-sm">
                    <CheckCircle className="w-4 h-4 mr-2" />
                    GIE actif
                  </span>
                ) : (
                  <span className="inline-flex items-center px-4 py-2 rounded-xl text-sm font-medium bg-amber-100 text-amber-600 shadow-sm">
                    <Clock className="w-4 h-4 mr-2" />
                    En attente d'activation
                  </span>
                )}
                
                {(gie.statutAdhesion !== 'validee' || gie.statutEnregistrement !== 'valide') && (
                  <button 
                    onClick={activerAdhesion}
                    className="flex items-center px-4 py-2 text-sm bg-primary-600 text-white rounded-xl hover:bg-primary-700 shadow-sm transition-all"
                  >
                    <CheckCircle className="w-4 h-4 mr-2" />
                    Activer l'adhésion
                  </button>
                )}
              </div>
            </div>
            
            <div className="flex flex-col md:flex-row items-start md:items-center justify-between">
              <div className="flex items-center mb-4 md:mb-0">
                <div className="flex items-center justify-center bg-primary-50 text-primary-600 rounded-xl h-16 w-16 mr-4 shadow-sm">
                  <Building className="w-8 h-8" />
                </div>
                <div>
                  <h1 className="text-2xl font-bold text-gray-800 mb-1">{gie.nomGIE}</h1>
                  <div className="flex items-center text-primary-600 text-sm font-medium">
                    <Clipboard className="w-4 h-4 mr-1.5" />
                    <span>{gie.identifiantGIE}</span>
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                <div className="flex items-center bg-gray-50 px-4 py-2 rounded-xl border border-gray-200">
                  <MapPin className="w-4 h-4 mr-2 text-primary-600" />
                  <div>
                    <p className="text-xs text-gray-500">Localisation</p>
                    <p className="text-sm font-medium">{gie.detailsGeographiques?.nomRegion || gie.region}, {gie.detailsGeographiques?.nomDepartement || gie.departement}</p>
                  </div>
                </div>
                <div className="flex items-center bg-gray-50 px-4 py-2 rounded-xl border border-gray-200">
                  <Calendar className="w-4 h-4 mr-2 text-primary-600" />
                  <div>
                    <p className="text-xs text-gray-500">Date de création</p>
                    <p className="text-sm font-medium">{new Date(gie.dateCreation).toLocaleDateString('fr-FR')}</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        
        {/* Tabs de navigation */}
        <div className="px-6 pt-4 border-t border-gray-100 bg-primary-50">
          <div className="flex overflow-x-auto space-x-2 pb-2">
            <button 
              onClick={() => setActiveTab('informations')} 
              className={`px-4 py-2 rounded-t-lg transition-all whitespace-nowrap flex items-center ${
                activeTab === 'informations' 
                  ? 'bg-white text-primary-600 font-medium shadow-sm border-t border-l border-r border-gray-200' 
                  : 'text-gray-600 hover:text-primary-600 hover:bg-white hover:bg-opacity-50'
              }`}
            >
              <FileText className={`w-4 h-4 mr-2 ${activeTab === 'informations' ? 'text-primary-600' : 'text-gray-500'}`} />
              Informations générales
            </button>
            <button 
              onClick={() => setActiveTab('membres')} 
              className={`px-4 py-2 rounded-t-lg transition-all whitespace-nowrap flex items-center ${
                activeTab === 'membres' 
                  ? 'bg-white text-primary-600 font-medium shadow-sm border-t border-l border-r border-gray-200' 
                  : 'text-gray-600 hover:text-primary-600 hover:bg-white hover:bg-opacity-50'
              }`}
            >
              <Users className={`w-4 h-4 mr-2 ${activeTab === 'membres' ? 'text-primary-600' : 'text-gray-500'}`} />
              Membres
            </button>
            <button 
              onClick={() => setActiveTab('documents')} 
              className={`px-4 py-2 rounded-t-lg transition-all whitespace-nowrap flex items-center ${
                activeTab === 'documents' 
                  ? 'bg-white text-primary-600 font-medium shadow-sm border-t border-l border-r border-gray-200' 
                  : 'text-gray-600 hover:text-primary-600 hover:bg-white hover:bg-opacity-50'
              }`}
            >
              <FileText className={`w-4 h-4 mr-2 ${activeTab === 'documents' ? 'text-primary-600' : 'text-gray-500'}`} />
              Documents
            </button>
            <button 
              onClick={() => setActiveTab('historique')} 
              className={`px-4 py-2 rounded-t-lg transition-all whitespace-nowrap flex items-center ${
                activeTab === 'historique' 
                  ? 'bg-white text-primary-600 font-medium shadow-sm border-t border-l border-r border-gray-200' 
                  : 'text-gray-600 hover:text-primary-600 hover:bg-white hover:bg-opacity-50'
              }`}
            >
              <Clock className={`w-4 h-4 mr-2 ${activeTab === 'historique' ? 'text-primary-600' : 'text-gray-500'}`} />
              Historique
            </button>
          </div>
        </div>
      </div>
      
      {/* Contenu principal */}
      {renderTabContent()}
      
      {/* Rendu du modal d'édition de membre */}
      {renderMemberEditModal()}
    </div>
  );
};

export default GIEDetails;
